{"version":3,"sources":["node.jsx","dijkstra.jsx","A_star.jsx","swarm.jsx","grid.jsx","index.js"],"names":["Node","state","this","props","row","col","isWall","isFinish","isStart","onMouseDown","onMouseUp","onMouseOver","extraClassName","id","className","Component","updateNeighbor","cur_node","grid","grid_row","grid_col","neighbor","node","r","c","push","filter","isvisited","getNeighbor","distance","prev_value","finishnode","Math","abs","wall_maker","start_row","stop_row","start_col","stop_col","start_change","stop_change","unvisited_grid","nav_height","animation_working","gridMaker","i","j","GridBlock","Infinity","gridChanged","newgrid","slice","document","getElementById","classList","remove","Grid","handleClickOutside","event","container","current","contains","target","setState","open","handleButtonClick","React","createRef","startnode","clearPath","linkdisabler","visitedInOrder","length","sort","nodeA","nodeB","shift","pop","dijkstra","nodesInShortestPathOrder","currentNode","console","log","animatePath","swarm","min_heuristic","min_total_distance","temp_heuristic","index","indexOf","splice","Astar","visitedNodesInOrder","setTimeout","animateShortestPath","x","y","add","clearBoard","random","d_variable","a_variable","s_variable","clear_grid","clear_path","r_maze","dijkstra_variable","astar_variable","swarm_variable","cleargrid","clearpath","randommaze","update_width","window","innerWidth","update_height","innerHeight","clientHeight","floor","updateDimensions","addEventListener","bind","removeEventListener","ref","type","class","onClick","href","traverseDijkstra","traverse_Astar","traverseSwarm","randomMaze","map","rowIdx","key","nodeIdx","handleMouseDown","handleMouseOver","handleMouseUp","ReactDOM","render"],"mappings":"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","file":"static/js/main.365ede99.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport \"./App.css\";\r\n\r\n//***********************************************************************************************************//\r\nclass Node extends Component {\r\n  state = {};\r\n  render() {\r\n    const {\r\n      row,\r\n      col,\r\n      isWall,\r\n      isFinish,\r\n      isStart,\r\n      onMouseDown,\r\n      onMouseUp,\r\n      onMouseOver,\r\n    } = this.props;\r\n    let extraClassName = \"grid-outline\";\r\n    if (isFinish) {\r\n      extraClassName = \"grid-stop\";\r\n    } else if (isStart) {\r\n      extraClassName = \"grid-start\";\r\n    } else if (isWall) {\r\n      extraClassName = \"wall\";\r\n    }\r\n    return (\r\n      <div\r\n        id={`grid-${row}-${col}`}\r\n        className={`grid-block  ${extraClassName}`}\r\n        onMouseDown={() => onMouseDown(row, col)}\r\n        onMouseUp={() => onMouseUp(row, col)}\r\n        onMouseOver={() => onMouseOver(row, col)}\r\n      ></div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Node;\r\n","import React, { Component } from \"react\";\r\nimport \"./App.css\";\r\n\r\nfunction sortNodesByDistance(unvisitedNodes) {\r\n  unvisitedNodes.sort((nodeA, nodeB) => nodeA.distance - nodeB.distance);\r\n}\r\n\r\nfunction updateNeighbor(cur_node, grid, grid_row, grid_col) {\r\n  let neighbor = getNeighbor(cur_node, grid, grid_row, grid_col);\r\n  for (let node of neighbor) {\r\n    node.distance = cur_node.distance + 1;\r\n    node.prev_value = cur_node;\r\n  }\r\n}\r\n\r\nfunction getNeighbor(node, grid, grid_row, grid_col) {\r\n  let neighbor = [];\r\n\r\n  let r = node.row;\r\n  let c = node.col;\r\n  if (r + 1 < grid_row) {\r\n    neighbor.push(grid[r + 1][c]);\r\n  }\r\n  if (c + 1 < grid_col) {\r\n    neighbor.push(grid[r][c + 1]);\r\n  }\r\n  if (r - 1 >= 0) {\r\n    neighbor.push(grid[r - 1][c]);\r\n  }\r\n  if (c - 1 >= 0) {\r\n    neighbor.push(grid[r][c - 1]);\r\n  }\r\n  return neighbor.filter((neighbor) => !neighbor.isvisited);\r\n}\r\n\r\nexport function dijkstra(startnode, finishnode, grid, grid_row, grid_col) {\r\n  let visitedInOrder = [];\r\n  let unvisited_grid = [];\r\n  startnode.distance = 0;\r\n  for (let i = 0; i < grid_row; i++) {\r\n    for (let j = 0; j < grid_col; j++) {\r\n      unvisited_grid.push(grid[i][j]);\r\n    }\r\n  }\r\n\r\n  while (!!unvisited_grid.length) {\r\n    sortNodesByDistance(unvisited_grid);\r\n    let cur_node = unvisited_grid.shift();\r\n    if (cur_node.isWall) continue;\r\n\r\n    if (cur_node.distance == Infinity) {\r\n      visitedInOrder.shift();\r\n      break;\r\n    }\r\n    cur_node.isvisited = true;\r\n    visitedInOrder.push(cur_node);\r\n    if (cur_node == finishnode) {\r\n      visitedInOrder.shift();\r\n      visitedInOrder.pop();\r\n      break;\r\n    }\r\n    updateNeighbor(cur_node, grid, grid_row, grid_col);\r\n  }\r\n\r\n  return visitedInOrder;\r\n}\r\n","import React, { Component } from \"react\";\r\nimport \"./App.css\";\r\n\r\nfunction updateNeighbor(cur_node, grid, grid_row, grid_col) {\r\n  let neighbor = getNeighbor(cur_node, grid, grid_row, grid_col);\r\n  for (let node of neighbor) {\r\n    node.distance = cur_node.distance + 1;\r\n    node.prev_value = cur_node;\r\n  }\r\n}\r\n\r\nfunction getNeighbor(node, grid, grid_row, grid_col) {\r\n  let neighbor = [];\r\n\r\n  let r = node.row;\r\n  let c = node.col;\r\n  if (r + 1 < grid_row) {\r\n    neighbor.push(grid[r + 1][c]);\r\n  }\r\n  if (c + 1 < grid_col) {\r\n    neighbor.push(grid[r][c + 1]);\r\n  }\r\n  if (r - 1 >= 0) {\r\n    neighbor.push(grid[r - 1][c]);\r\n  }\r\n  if (c - 1 >= 0) {\r\n    neighbor.push(grid[r][c - 1]);\r\n  }\r\n  return neighbor.filter((neighbor) => !neighbor.isvisited);\r\n}\r\n\r\nexport function Astar(startnode, finishnode, grid, grid_row, grid_col) {\r\n  let visitedInOrder = [];\r\n  let unvisited_grid = [];\r\n  startnode.distance = 0;\r\n  for (let i = 0; i < grid_row; i++) {\r\n    for (let j = 0; j < grid_col; j++) {\r\n      unvisited_grid.push(grid[i][j]);\r\n    }\r\n  }\r\n\r\n  while (!!unvisited_grid.length) {\r\n    let cur_node;\r\n    let min_heuristic = Infinity;\r\n    let min_total_distance = Infinity;\r\n    for (let i = 0; i < unvisited_grid.length; i++) {\r\n      let temp_heuristic =\r\n        Math.abs(unvisited_grid[i].row - finishnode.row) +\r\n        Math.abs(unvisited_grid[i].col - finishnode.col);\r\n      if (unvisited_grid[i].distance + temp_heuristic < min_total_distance) {\r\n        min_total_distance = unvisited_grid[i].distance + temp_heuristic;\r\n        cur_node = unvisited_grid[i];\r\n      }\r\n      if (unvisited_grid[i].distance + temp_heuristic == min_total_distance) {\r\n        if (temp_heuristic < min_heuristic) {\r\n          min_heuristic = temp_heuristic;\r\n          cur_node = unvisited_grid[i];\r\n        }\r\n      }\r\n    }\r\n    let index = unvisited_grid.indexOf(cur_node);\r\n    unvisited_grid.splice(index, 1);\r\n\r\n    if (cur_node.isWall) continue;\r\n\r\n    if (cur_node.distance == Infinity) {\r\n      visitedInOrder.shift();\r\n      break;\r\n    }\r\n    cur_node.isvisited = true;\r\n    visitedInOrder.push(cur_node);\r\n    if (cur_node == finishnode) {\r\n      visitedInOrder.shift();\r\n      visitedInOrder.pop();\r\n      break;\r\n    }\r\n\r\n    updateNeighbor(cur_node, grid, grid_row, grid_col);\r\n  }\r\n  return visitedInOrder;\r\n}\r\n","import React, { Component } from \"react\";\r\nimport \"./App.css\";\r\n\r\nfunction sortNodesByDistance(unvisitedNodes) {\r\n  unvisitedNodes.sort((nodeA, nodeB) => nodeA.distance - nodeB.distance);\r\n}\r\n\r\nfunction updateNeighbor(cur_node, grid, grid_row, grid_col, finishnode) {\r\n  let neighbor = getNeighbor(cur_node, grid, grid_row, grid_col);\r\n  for (let node of neighbor) {\r\n    node.distance =\r\n      cur_node.distance +\r\n      1 +\r\n      Math.abs(node.row - finishnode.row) +\r\n      Math.abs(node.col - finishnode.col);\r\n    node.prev_value = cur_node;\r\n  }\r\n}\r\n\r\nfunction getNeighbor(node, grid, grid_row, grid_col) {\r\n  let neighbor = [];\r\n\r\n  let r = node.row;\r\n  let c = node.col;\r\n  if (r + 1 < grid_row) {\r\n    neighbor.push(grid[r + 1][c]);\r\n  }\r\n  if (c + 1 < grid_col) {\r\n    neighbor.push(grid[r][c + 1]);\r\n  }\r\n  if (r - 1 >= 0) {\r\n    neighbor.push(grid[r - 1][c]);\r\n  }\r\n  if (c - 1 >= 0) {\r\n    neighbor.push(grid[r][c - 1]);\r\n  }\r\n  return neighbor.filter((neighbor) => !neighbor.isvisited);\r\n}\r\n\r\nexport function swarm(startnode, finishnode, grid, grid_row, grid_col) {\r\n  let visitedInOrder = [];\r\n  let unvisited_grid = [];\r\n  startnode.distance = 0;\r\n  for (let i = 0; i < grid_row; i++) {\r\n    for (let j = 0; j < grid_col; j++) {\r\n      unvisited_grid.push(grid[i][j]);\r\n    }\r\n  }\r\n\r\n  while (!!unvisited_grid.length) {\r\n    sortNodesByDistance(unvisited_grid);\r\n    let cur_node = unvisited_grid.shift();\r\n    if (cur_node.isWall) continue;\r\n\r\n    if (cur_node.distance == Infinity) {\r\n      visitedInOrder.shift();\r\n      break;\r\n    }\r\n    cur_node.isvisited = true;\r\n    visitedInOrder.push(cur_node);\r\n    if (cur_node == finishnode) {\r\n      visitedInOrder.shift();\r\n      visitedInOrder.pop();\r\n      break;\r\n    }\r\n    updateNeighbor(cur_node, grid, grid_row, grid_col, finishnode);\r\n  }\r\n\r\n  return visitedInOrder;\r\n}\r\n","import React, { Component } from \"react\";\r\nimport \"./App.css\";\r\nimport Node from \"./node.jsx\";\r\nimport Dijkstra, { dijkstra } from \"./dijkstra\";\r\nimport { Astar } from \"./A_star\";\r\nimport { swarm } from \"./swarm\";\r\nlet wall_maker = false;\r\nlet start_row = 10;\r\nlet stop_row = 10;\r\nlet start_col = 10;\r\nlet stop_col = 40;\r\nlet start_change = false;\r\nlet stop_change = false;\r\nlet unvisited_grid = [];\r\nlet grid_row = 20;\r\nlet grid_col = 50;\r\nlet nav_height = 0;\r\nlet animation_working = false;\r\n/* let dijkstra_variable;\r\nlet astar_variable;\r\nlet swarm_variable;\r\n*/\r\n/*----------------------------------------------- GRID START----------------------------------------------------------------*/\r\n\r\nfunction gridMaker() {\r\n  const grid = [];\r\n  for (let i = 0; i < grid_row; i++) {\r\n    const row = [];\r\n    for (let j = 0; j < grid_col; j++) {\r\n      row.push(GridBlock(i, j));\r\n      unvisited_grid.push(GridBlock(i, j));\r\n    }\r\n    grid.push(row);\r\n  }\r\n  return grid;\r\n}\r\n\r\nfunction GridBlock(r, c) {\r\n  return {\r\n    row: r,\r\n    col: c,\r\n    isStart: r == start_row && c == start_col,\r\n    isFinish: r == stop_row && c == stop_col,\r\n    isvisited: false,\r\n    prev_value: null,\r\n    isWall: false,\r\n    distance: Infinity,\r\n  };\r\n}\r\n\r\nfunction gridChanged(grid, row, col) {\r\n  if (animation_working === false) {\r\n    const newgrid = grid.slice();\r\n    if (start_change) {\r\n      if (row == stop_row && col == stop_col) {\r\n      } else {\r\n        let node = newgrid[start_row][start_col];\r\n        node.isStart = false;\r\n        start_col = col;\r\n        start_row = row;\r\n        node = newgrid[row][col];\r\n        node.isStart = true;\r\n      }\r\n    } else if (stop_change) {\r\n      if (row == start_row && col == start_col) {\r\n      } else {\r\n        let node = newgrid[stop_row][stop_col];\r\n        node.isFinish = false;\r\n        stop_col = col;\r\n        stop_row = row;\r\n        node = newgrid[row][col];\r\n        node.isFinish = true;\r\n      }\r\n    } else {\r\n      if (row == start_row && col == start_col) {\r\n      } else if (row == stop_row && col == stop_col) {\r\n      } else {\r\n        let node = newgrid[row][col];\r\n        node.isWall = !node.isWall;\r\n        let y = document.getElementById(`grid-${node.row}-${node.col}`);\r\n        y.classList.remove(\"grid-outline\");\r\n      }\r\n    }\r\n    return newgrid;\r\n  }\r\n}\r\n\r\n/*--------------------------------------------------  GRID  END -------------------------------------------------------------*/\r\n\r\nclass Grid extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      grid: [],\r\n    };\r\n  }\r\n\r\n  traverseDijkstra(startnode, finishnode, grid) {\r\n    this.setState({ open: false });\r\n    if (animation_working === false) {\r\n      this.clearPath(this.state.grid);\r\n      animation_working = true;\r\n      this.linkdisabler(grid);\r\n      let visitedInOrder = dijkstra(\r\n        startnode,\r\n        finishnode,\r\n        grid,\r\n        grid_row,\r\n        grid_col\r\n      );\r\n\r\n      const nodesInShortestPathOrder = [];\r\n      let currentNode = finishnode;\r\n      while (currentNode.prev_value !== null) {\r\n        nodesInShortestPathOrder.push(currentNode);\r\n        currentNode = currentNode.prev_value;\r\n      }\r\n      nodesInShortestPathOrder.shift();\r\n      console.log(\"dijkstra path length :\", nodesInShortestPathOrder.length);\r\n      this.animatePath(visitedInOrder, nodesInShortestPathOrder);\r\n    }\r\n  }\r\n  traverseSwarm(startnode, finishnode, grid) {\r\n    this.setState({ open: false });\r\n    if (animation_working === false) {\r\n      this.clearPath(this.state.grid);\r\n      animation_working = true;\r\n      this.linkdisabler(grid);\r\n      let visitedInOrder = swarm(\r\n        startnode,\r\n        finishnode,\r\n        grid,\r\n        grid_row,\r\n        grid_col\r\n      );\r\n\r\n      const nodesInShortestPathOrder = [];\r\n      let currentNode = finishnode;\r\n      while (currentNode.prev_value !== null) {\r\n        nodesInShortestPathOrder.push(currentNode);\r\n        currentNode = currentNode.prev_value;\r\n      }\r\n      nodesInShortestPathOrder.shift();\r\n      console.log(\"swarm path length :\", nodesInShortestPathOrder.length);\r\n      this.animatePath(visitedInOrder, nodesInShortestPathOrder);\r\n    }\r\n  }\r\n\r\n  traverse_Astar(startnode, finishnode, grid) {\r\n    this.setState({ open: false });\r\n    if (animation_working === false) {\r\n      this.clearPath(this.state.grid);\r\n      animation_working = true;\r\n      this.linkdisabler(grid);\r\n      let visitedInOrder = Astar(\r\n        startnode,\r\n        finishnode,\r\n        grid,\r\n        grid_row,\r\n        grid_col\r\n      );\r\n\r\n      const nodesInShortestPathOrder = [];\r\n      let currentNode = finishnode;\r\n      while (currentNode.prev_value !== null) {\r\n        nodesInShortestPathOrder.push(currentNode);\r\n        currentNode = currentNode.prev_value;\r\n      }\r\n      nodesInShortestPathOrder.shift();\r\n      console.log(\"astar path length :\", nodesInShortestPathOrder.length);\r\n      this.animatePath(visitedInOrder, nodesInShortestPathOrder);\r\n    }\r\n  }\r\n\r\n  animatePath(visitedNodesInOrder, nodesInShortestPathOrder) {\r\n    for (let i = 0; i <= visitedNodesInOrder.length; i++) {\r\n      if (i === visitedNodesInOrder.length) {\r\n        setTimeout(() => {\r\n          this.animateShortestPath(nodesInShortestPathOrder);\r\n        }, 10 * i);\r\n        if (nodesInShortestPathOrder.length === 0) {\r\n          animation_working = false;\r\n          this.linkdisabler(this.state.grid);\r\n        }\r\n        return;\r\n      }\r\n\r\n      setTimeout(() => {\r\n        const node = visitedNodesInOrder[i];\r\n        document.getElementById(`grid-${node.row}-${node.col}`).className =\r\n          \"grid-block grid-visited\";\r\n      }, 10 * i);\r\n    }\r\n  }\r\n\r\n  animateShortestPath(nodesInShortestPathOrder) {\r\n    for (let i = 0; i < nodesInShortestPathOrder.length; i++) {\r\n      setTimeout(() => {\r\n        const node = nodesInShortestPathOrder[i];\r\n        document.getElementById(`grid-${node.row}-${node.col}`).className =\r\n          \"grid-block grid-shortest-path\";\r\n      }, 50 * i);\r\n    }\r\n    animation_working = false;\r\n    this.linkdisabler(this.state.grid);\r\n  }\r\n\r\n  clearBoard(grid) {\r\n    if (animation_working === false) {\r\n      const newgrid = grid.slice();\r\n      for (let i = 0; i < grid_row; i++) {\r\n        for (let j = 0; j < grid_col; j++) {\r\n          let x = newgrid[i][j];\r\n          let y = document.getElementById(`grid-${x.row}-${x.col}`);\r\n          y.classList.remove(\"grid-shortest-path\");\r\n          y.classList.remove(\"grid-visited\");\r\n          y.classList.add(\"grid-outline\");\r\n          x.isWall = false;\r\n          y.isWall = false;\r\n          x.isvisited = false;\r\n          x.prev_value = null;\r\n          x.distance = Infinity;\r\n        }\r\n      }\r\n      this.setState({ grid: newgrid });\r\n    }\r\n  }\r\n  clearPath(grid) {\r\n    if (animation_working === false) {\r\n      const newgrid = grid.slice();\r\n      for (let i = 0; i < grid_row; i++) {\r\n        for (let j = 0; j < grid_col; j++) {\r\n          let x = newgrid[i][j];\r\n          let y = document.getElementById(`grid-${x.row}-${x.col}`);\r\n          y.classList.remove(\"grid-shortest-path\");\r\n          y.classList.remove(\"grid-visited\");\r\n          y.classList.add(\"grid-outline\");\r\n          if (y.isWall || x.isWall) {\r\n            y.classList.remove(\"grid-outline\");\r\n          }\r\n          x.isvisited = false;\r\n          x.prev_value = null;\r\n          x.distance = Infinity;\r\n        }\r\n      }\r\n      this.setState({ grid: newgrid });\r\n    }\r\n  }\r\n  randomMaze(grid) {\r\n    if (animation_working === false) {\r\n      const newgrid = grid.slice();\r\n      this.clearBoard(grid);\r\n      for (let i = 0; i < grid_row; i++) {\r\n        for (let j = 0; j < grid_col; j++) {\r\n          let x = newgrid[i][j];\r\n          let y = document.getElementById(`grid-${x.row}-${x.col}`);\r\n          if (Math.random() > 0.7) {\r\n            if (x.isStart == false && x.isFinish == false) {\r\n              x.isWall = !x.isWall;\r\n              y.isWall = !y.isWall;\r\n            }\r\n            y.classList.remove(\"grid-outline\");\r\n          }\r\n        }\r\n      }\r\n      this.setState({ grid: newgrid });\r\n      animation_working = false;\r\n    }\r\n  }\r\n  linkdisabler(grid) {\r\n    let d_variable, a_variable, s_variable, clear_grid, clear_path, r_maze;\r\n    if (animation_working === false) {\r\n      d_variable = \"Dijkstra\";\r\n      a_variable = \"Astar\";\r\n      s_variable = \"Swarm\";\r\n      clear_grid = \"clear grid\";\r\n      clear_path = \"clear path\";\r\n      r_maze = \"random maze\";\r\n    } else {\r\n      d_variable = <s>Dijkstra</s>;\r\n      a_variable = <s>Astar</s>;\r\n      s_variable = <s>Swarm</s>;\r\n      clear_grid = <s>clear grid</s>;\r\n      clear_path = <s>clear path</s>;\r\n      r_maze = <s>random maze</s>;\r\n    }\r\n\r\n    this.setState({ dijkstra_variable: d_variable });\r\n    this.setState({ astar_variable: a_variable });\r\n    this.setState({ swarm_variable: s_variable });\r\n    this.setState({ cleargrid: clear_grid });\r\n    this.setState({ clearpath: clear_path });\r\n    this.setState({ randommaze: r_maze });\r\n  }\r\n\r\n  handleMouseOver(row, col) {\r\n    if (animation_working === false) {\r\n      if (start_change || stop_change || wall_maker) {\r\n        const newgrid = gridChanged(this.state.grid, row, col);\r\n        this.setState({ grid: newgrid });\r\n      }\r\n    }\r\n  }\r\n\r\n  handleMouseDown(row, col) {\r\n    if (animation_working === false) {\r\n      this.clearPath(this.state.grid);\r\n      if (row == start_row && col == start_col) {\r\n        start_change = true;\r\n      } else if (row == stop_row && col == stop_col) {\r\n        stop_change = true;\r\n      } else {\r\n        wall_maker = true;\r\n        const newgrid = gridChanged(this.state.grid, row, col);\r\n        this.setState({ grid: newgrid });\r\n      }\r\n    }\r\n  }\r\n\r\n  handleMouseUp() {\r\n    if (animation_working === false) {\r\n      if (start_change) {\r\n        start_change = false;\r\n      } else if (stop_change) {\r\n        stop_change = false;\r\n      } else {\r\n        wall_maker = false;\r\n      }\r\n    }\r\n  }\r\n\r\n  handleClickOutside = (event) => {\r\n    if (\r\n      this.container.current &&\r\n      !this.container.current.contains(event.target)\r\n    ) {\r\n      this.setState({\r\n        open: false,\r\n      });\r\n    }\r\n  };\r\n  /*-----------------------------------------RENDERING START-----------------------------------------------------------------*/\r\n  /*\r\n  componentDidMount() {\r\n    nav_height = document.getElementById(\"nav\").clientHeight;\r\n    grid_row = Math.floor((window.innerHeight - nav_height) / 25);\r\n    grid_col = Math.floor(window.innerWidth / 25);\r\n    start_col = 0;\r\n    start_row = Math.floor(grid_row / 2);\r\n    stop_col = grid_col - 1;\r\n    stop_row = Math.floor(grid_row / 2);\r\n    const grid = gridMaker();\r\n\r\n    this.setState({ grid });\r\n  }\r\n*/\r\n\r\n  updateDimensions() {\r\n    let update_width = window.innerWidth;\r\n    let update_height = window.innerHeight;\r\n\r\n    nav_height = document.getElementById(\"nav\").clientHeight;\r\n    grid_row = Math.floor((update_height - nav_height) / 25);\r\n    grid_col = Math.floor(update_width / 25);\r\n    start_col = 0;\r\n    start_row = Math.floor(grid_row / 2);\r\n    stop_col = grid_col - 1;\r\n    stop_row = Math.floor(grid_row / 2);\r\n    const newgrid = gridMaker();\r\n    this.setState({ grid: newgrid });\r\n  }\r\n\r\n  state = {\r\n    open: false,\r\n  };\r\n  handleButtonClick = () => {\r\n    this.setState((state) => {\r\n      return {\r\n        open: !state.open,\r\n      };\r\n    });\r\n  };\r\n\r\n  container = React.createRef();\r\n  state = {\r\n    open: false,\r\n  };\r\n\r\n  componentDidMount() {\r\n    const grid = gridMaker();\r\n    this.setState({ grid });\r\n    this.updateDimensions();\r\n    this.linkdisabler(this.state.grid);\r\n\r\n    window.addEventListener(\"resize\", this.updateDimensions.bind(this));\r\n    document.addEventListener(\"mousedown\", this.handleClickOutside);\r\n  }\r\n  componentWillUnmount() {\r\n    window.removeEventListener(\"resize\", this.updateDimensions.bind(this));\r\n    document.removeEventListener(\"mousedown\", this.handleClickOutside);\r\n  }\r\n\r\n  /*----------------------------------------------------------------------------------------------*/\r\n\r\n  render() {\r\n    const {\r\n      grid,\r\n      dijkstra_variable,\r\n      astar_variable,\r\n      swarm_variable,\r\n      cleargrid,\r\n      clearpath,\r\n      randommaze,\r\n    } = this.state;\r\n\r\n    return (\r\n      <div className=\"position\">\r\n        <div className=\"container\" id=\"nav\" ref={this.container}>\r\n          <button type=\"button\" class=\"button\" onClick={this.handleButtonClick}>\r\n            ☰ Algorithms\r\n          </button>\r\n          {this.state.open && (\r\n            <div class=\"dropdown\">\r\n              <ul>\r\n                <li>\r\n                  <a\r\n                    class=\"anch\"\r\n                    href=\"#\"\r\n                    onClick={() =>\r\n                      this.traverseDijkstra(\r\n                        grid[start_row][start_col],\r\n                        grid[stop_row][stop_col],\r\n                        grid,\r\n                        grid_row,\r\n                        grid_col\r\n                      )\r\n                    }\r\n                  >\r\n                    {dijkstra_variable}\r\n                  </a>\r\n                </li>\r\n                <li>\r\n                  <a\r\n                    class=\"anch\"\r\n                    href=\"#\"\r\n                    onClick={() =>\r\n                      this.traverse_Astar(\r\n                        grid[start_row][start_col],\r\n                        grid[stop_row][stop_col],\r\n                        grid,\r\n                        grid_row,\r\n                        grid_col\r\n                      )\r\n                    }\r\n                  >\r\n                    {astar_variable}\r\n                  </a>\r\n                </li>\r\n                <li>\r\n                  <a\r\n                    class=\"anch\"\r\n                    href=\"#\"\r\n                    onClick={() =>\r\n                      this.traverseSwarm(\r\n                        grid[start_row][start_col],\r\n                        grid[stop_row][stop_col],\r\n                        grid,\r\n                        grid_row,\r\n                        grid_col\r\n                      )\r\n                    }\r\n                  >\r\n                    {swarm_variable}\r\n                  </a>\r\n                </li>\r\n              </ul>\r\n            </div>\r\n          )}\r\n          <button\r\n            type=\"button\"\r\n            class=\"button\"\r\n            href=\"#\"\r\n            onClick={() => this.randomMaze(grid)}\r\n          >\r\n            {randommaze}\r\n          </button>\r\n          <button\r\n            type=\"button\"\r\n            class=\"button\"\r\n            href=\"#\"\r\n            onClick={() => this.clearBoard(grid)}\r\n          >\r\n            {cleargrid}\r\n          </button>\r\n          <button\r\n            type=\"button\"\r\n            class=\"button\"\r\n            href=\"#\"\r\n            onClick={() => this.clearPath(grid)}\r\n          >\r\n            {clearpath}\r\n          </button>\r\n        </div>\r\n\r\n        <div className=\"grid unselect\">\r\n          {grid.map((row, rowIdx) => {\r\n            return (\r\n              <div key={rowIdx} className=\"col\">\r\n                {row.map((node, nodeIdx) => {\r\n                  const { row, col, isFinish, isStart, isWall } = node;\r\n                  return (\r\n                    <div className=\"row\">\r\n                      <Node\r\n                        key={nodeIdx}\r\n                        col={col}\r\n                        isFinish={isFinish}\r\n                        isStart={isStart}\r\n                        isWall={isWall}\r\n                        onMouseDown={(row, col) =>\r\n                          this.handleMouseDown(row, col)\r\n                        }\r\n                        onMouseOver={(row, col) =>\r\n                          this.handleMouseOver(row, col)\r\n                        }\r\n                        onMouseUp={(row, col) => this.handleMouseUp(row, col)}\r\n                        row={row}\r\n                      ></Node>\r\n                    </div>\r\n                  );\r\n                })}\r\n              </div>\r\n            );\r\n          })}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Grid;\r\n/**----------------------------------------------RENDERING -------------------------------------------------------------*/\r\n","import React, { Component } from \"react\";\r\nimport Grid from \"./grid.jsx\";\r\nimport ReactDOM from \"react-dom\";\r\n\r\nReactDOM.render(<Grid />, document.getElementById(\"root\"));\r\n"],"sourceRoot":""}